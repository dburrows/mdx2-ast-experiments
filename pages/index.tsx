import type { NextPage } from "next";
import Head from "next/head";
// import Image from "next/image";
import styles from "../styles/Home.module.css";
import { fromMarkdown } from "mdast-util-from-markdown";
import { toMarkdown } from "mdast-util-to-markdown";
import { mdxjs } from "micromark-extension-mdxjs";
import { mdxFromMarkdown, mdxToMarkdown } from "mdast-util-mdx";
import { traverse } from "../utils/traverse";

const mdx2sample = `
import Box from "place"

Hereâ€™s an expression:

{
  1 + 1 /* } */
}

Which you can also put inline: {1+1}.

<Box>
  <SmallerBox>
    - Lists, which can be indented.
  </SmallerBox>
</Box>
`;

const mdx2smallsample = `
import Box from "place"

# Foo

<Box/>
`;

const mdxast = {
  type: "root",
  children: [
    {
      type: "mdxjsEsm",
      value: 'import Box from "place"',
      data: {
        estree: {
          type: "Program",
          body: [
            {
              type: "ImportDeclaration",
              specifiers: [
                {
                  type: "ImportDefaultSpecifier",
                  local: { type: "Identifier", name: "Box" },
                },
              ],
              source: {
                type: "Literal",
                value: "place",
                raw: '"place"',
              },
            },
          ],
          sourceType: "module",
          comments: [],
        },
      },
    },
    {
      type: "heading",
      depth: 1,
      children: [{ type: "text", value: "Foo" }],
    },
    {
      type: "mdxJsxFlowElement",
      name: "Box",
      attributes: [],
      children: [],
    },
  ],
};

const tree = fromMarkdown(mdx2sample, {
  extensions: [mdxjs()],
  mdastExtensions: [mdxFromMarkdown()],
});

const tree2 = fromMarkdown(mdx2smallsample, {
  extensions: [mdxjs()],
  mdastExtensions: [mdxFromMarkdown()],
});

// strip out positional text info
traverse(tree2, function (o, k, v) {
  console.log(k + " : " + v);
  if (
    ["position", "column", "offset", "start", "end", "line", "range"].includes(
      k
    )
  ) {
    delete o[k];
  }
});

console.log(JSON.stringify(tree2, null, 2));
const out = toMarkdown(tree2, { extensions: [mdxToMarkdown()] });

const Home: NextPage = () => {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <code>
        <pre>{JSON.stringify(tree2, null, 2)}</pre>
      </code>
      <code>
        <pre>{out}</pre>
      </code>
    </div>
  );
};

export default Home;
